{"ast":null,"code":"var _jsxFileName = \"/Users/eyram/Documents/Coding Files/fullstackopen2019/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, text));\n};\n\nconst Display = ({\n  number,\n  text\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, text), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \" \"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, number));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [allClicks, setAll] = useState([]);\n\n  const handleClick = (value, runLogic, total, totalLogic) => {\n    totalLogic(total.reduce((accumulator, currentValue) => accumulator + currentValue));\n    runLogic(value + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Button, {\n    handleClick: () => handleClick(good, setGood),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => handleClick(neutral, setNeutral),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => handleClick(bad, setBad),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(Display, {\n    number: good,\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Display, {\n    number: neutral,\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Display, {\n    number: bad,\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/eyram/Documents/Coding Files/fullstackopen2019/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","handleClick","text","Display","number","App","good","setGood","neutral","setNeutral","bad","setBad","allClicks","setAll","value","runLogic","total","totalLogic","reduce","accumulator","currentValue","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({ handleClick, text }) => {\n  return (\n    <>\n      <button onClick={handleClick}>{text}</button>\n    </>\n  )\n}\n\nconst Display = ({ number, text }) => {\n  return (\n    <div>\n      <span>{text}</span>\n      <span> </span>\n      <span>{number}</span>\n    </div>\n\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [allClicks, setAll] = useState([])\n\n\n  const handleClick = (value, runLogic, total, totalLogic) => {\n    totalLogic(total.reduce((accumulator, currentValue) => accumulator + currentValue))\n    runLogic(value + 1)\n  }\n\n  return (\n    <div>\n      <div>\n        <h1>give feedback</h1>\n        <Button handleClick={() => handleClick(good, setGood)} text=\"good\" />\n        <Button handleClick={() => handleClick(neutral, setNeutral)} text=\"neutral\" />\n        <Button handleClick={() => handleClick(bad, setBad)} text=\"bad\" />\n      </div>\n\n      <div>\n        <h1>statistics</h1>\n        <Display number={good} text=\"good\" />\n        <Display number={neutral} text=\"neutral\" />\n        <Display number={bad} text=\"bad\" />\n      </div>\n    </div>\n  )\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}