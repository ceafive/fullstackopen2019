{"ast":null,"code":"var _jsxFileName = \"/Users/eyram/Documents/Coding Files/fullstackopen2019/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, text));\n};\n\nconst Statistics = ({\n  text,\n  number\n}) => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, text), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, number));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n\n  const handleClick = (value, runLogic) => {\n    //Logic for changing state\n    runLogic(value + 1);\n    setTotal(total + 1);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Button, {\n    handleClick: () => handleClick(good, setGood),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => handleClick(neutral, setNeutral),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => handleClick(bad, setBad),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(React.Fragment, null, React.createElement(Statistics, {\n    text: \"good\",\n    number: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"neutral\",\n    number: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"bad\",\n    number: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"all\",\n    number: total,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"average\",\n    number: total / 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"positive\",\n    number: total === 0 ? 0 : Math.floor(good / total) * 100 + '%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/eyram/Documents/Coding Files/fullstackopen2019/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","handleClick","text","Statistics","number","App","good","setGood","neutral","setNeutral","bad","setBad","total","setTotal","value","runLogic","Math","floor","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({ handleClick, text }) => {\n  return (\n    <>\n      <button onClick={handleClick}>{text}</button>\n    </>\n  )\n}\n\nconst Statistics = ({ text, number }) => {\n  return (\n    <tr>\n      <td>{text}</td>\n      <td>{number}</td>\n    </tr>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [total, setTotal] = useState(0)\n\n  const handleClick = (value, runLogic) => {\n    //Logic for changing state\n    runLogic(value + 1)\n    setTotal(total + 1)\n  }\n\n  return (\n    <>\n      <div>\n        <h1>give feedback</h1>\n        <Button handleClick={() => handleClick(good, setGood)} text=\"good\" />\n        <Button handleClick={() => handleClick(neutral, setNeutral)} text=\"neutral\" />\n        <Button handleClick={() => handleClick(bad, setBad)} text=\"bad\" />\n      </div>\n\n      <div>\n        <h1>statistics</h1>\n        <>\n          <Statistics text=\"good\" number={good} />\n          <Statistics text=\"neutral\" number={neutral} />\n          <Statistics text=\"bad\" number={bad} />\n          <Statistics text=\"all\" number={total} />\n          <Statistics text=\"average\" number={total / 3} />\n          <Statistics text=\"positive\" number={total === 0 ? 0 : Math.floor((good / total)) * 100 + '%'} />\n        </>\n      </div>\n    </>\n  )\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}